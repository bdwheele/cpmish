; cpmish BIOS Â© 2019 David Given
; This file is distributable under the terms of the 2-clause BSD license.
; See COPYING.cpmish in the distribution root directory for more information.

; This is a general purpose TTY core, providing ADM-3a/Kaypro IIish escape
; sequences. It's intended to be loaded with maclib so that various
; options can be provided. It provides the state machine for parsing the
; input stream, tracking the cursor position, etc, before calling out to
; supplied low-level routines to do the actual work.

    dseg
tty_cursorx:    db 0
tty_cursory:    db 0 ; must be immediately after tty_cursory
tty_attributes: db 0

commandlen:    db 0
commandgot:    db 0
commandbuf:    ds 3

maybe_update_cursor macro
		if CURSOR_UPDATES
			ld hl, tty_update_cursor
			push hl
		endif
	endm

    cseg

; --- Clears (and initialises) the screen -----------------------------------

tty_init:
    xra a
    ld (commandlen), a
    ld (tty_attributes), a
	if CLEAR_SCREEN_ON_INIT == 0
	jr tty_home_cursor
	endif
    ; fall through
tty_clear_screen:
    call tty_home_cursor
    jp tty_clear_to_eos
    
tty_home_cursor:
	maybe_update_cursor
    xor a
    ld (tty_cursorx), a
    ld (tty_cursory), a
    ret

; --- Screen clearing -------------------------------------------------------

    if EMULATE_CLEAR_TO_EOL
tty_clear_to_eol:
    ld a, (tty_cursorx)
    push af
.1:
    ld a, (tty_cursorx)
    cp SCREEN_WIDTH
    jr z, .2
    ld a, ' '
    call tty_rawwrite
    ld hl, tty_cursorx
    inc (hl)
    jr .1
.2:
    pop af
    ld (tty_cursorx), a
    ret
    endif

    if EMULATE_CLEAR_TO_EOS
tty_clear_to_eos:
    ld hl, (tty_cursorx)
    push hl
    xor a
    ld (tty_cursorx), a
.1
    ld a, (tty_cursory)
    inc a
    cp SCREEN_HEIGHT
    jr z, .2
    ld (tty_cursory), a
    call tty_clear_to_eol
    jr .1
.2
    pop hl
    ld (tty_cursorx), hl
    jp tty_clear_to_eol
    endif

; --- Performs a carriage return --------------------------------------------

tty_newline:
    call tty_cursor_down
    ; fall through
tty_carriagereturn:
	maybe_update_cursor
    xor a
    ld (tty_cursorx), a
    ret

; --- Move the cursor -------------------------------------------------------

tty_cursor_left:
	maybe_update_cursor
    ld hl, tty_cursorx
    dec (hl)
    ret p
    inc (hl)
    ret

tty_cursor_up:
	maybe_update_cursor
    ld hl, tty_cursory
    dec (hl)
    ret p
    inc (hl)
    ret

tty_cursor_right:
	maybe_update_cursor
    ld hl, tty_cursorx
    ld a, (hl)
    inc a
    cp SCREEN_WIDTH
    ret z
    ld (hl), a
    ret

tty_cursor_down:
	maybe_update_cursor
    ld hl, tty_cursory
    ld a, (hl)
    inc a
    ld (hl), a
    cp SCREEN_HEIGHT
    ret nz
    dec (hl)                ; oops, don't go the next line after all
tty_scroll:
	maybe_update_cursor
	ld hl, tty_cursory
	ld a, (hl)
	push af
	ld (hl), 0
	call tty_delete_line
	pop af
	ld (tty_cursory), a
	ret

; Move to (B, C).
tty_goto_xy:
	maybe_update_cursor
    ld a, b
    cp SCREEN_WIDTH
    ret nc
    ld (tty_cursorx), a

    ld a, c
    cp SCREEN_HEIGHT
    ret nc
    ld (tty_cursory), a
	ret

; --- Prints the character in A ---------------------------------------------
; (also tty_newline)

; Helper routine: called from tty_putc if this is a non-printable control
; character. The character is in A.
controlcharacter:
    cp 0x08
    jp z, tty_cursor_left
    cp 0x0c
    jr z, tty_cursor_right
    cp 0x0a
    jr z, tty_cursor_down
    cp 0x0b
    jp z, tty_cursor_up
    cp 0x1e
    jp z, tty_home_cursor
    cp 0x0d
    jp z, tty_carriagereturn
    cp 0x18
    jp z, tty_clear_to_eol
    cp 0x17
    jp z, tty_clear_to_eos
    cp 0x1a
    jp z, tty_clear_screen
    cp 0x1b
    ret nz ; give up if not an escape character

    ; Escape characters need parameters, starting with one.
    xor a
    ld (commandgot), a
    inc a
    ld (commandlen), a
    ret
    
; Helper routine: deal with command bytes (passed in C).
queue_command_byte:
    ; Write the byte to the buffer.

    ld hl, commandgot
    ld d, 0
    ld e, (hl)
    inc (hl)

    ld hl, commandbuf
    add hl, de
    ld (hl), c

    ; Have we reached the end of the buffer?

    ld hl, commandlen
    ld a, (commandgot)
    cp (hl)
    ret nz              ; no, go back for more bytes.
    xor a
    ld (hl), a          ; end of command

    ; Process a command.

    ld a, (commandbuf+0)
    cp 'B'
    jr z, setresetattr
    cp 'C'
    jr z, setresetattr
    cp 'E'
    jp z, tty_insert_line
    cp 'R'
    jp z, tty_delete_line
    cp '='
    jr z, gotoxy
    ret

; Helper routine: handles set/reset tty_attributes.
setresetattr:
    ld a, (commandgot)  ; B, C takes parameters
    cp 2                ; do we have enough bytes?
    jr z, .1            ; yes, execute command
    ld a, 2             ; not enough bytes read yet
    ld (commandlen), a
    ret
.1:
    ld a, (commandbuf+1)
    cp '0'              ; reverse intensity
    ret nz              ; don't support anything else
    ld a, (commandbuf+0) ; B=on, C=off
    ld hl, tty_attributes
    res 0, (hl)
    bit 0, a
    ret nz
    set 0, (hl)
    ret
    
; Helper routine: handles ESC = (gotoxy).
gotoxy:
    ld a, (commandgot)  ; = takes parameters
    cp 3                ; do we have enough bytes?
    jr z, .1            ; yes, execute command
    ld a, 3             ; not enough bytes read yet
    ld (commandlen), a
    ret
.1:
    ld hl, commandbuf+1 ; got enough bytes; process command
    ld a, (hl)
    sub 32
    ld c, a             ; Y
    inc hl
    ld a, (hl)
    sub 32
    ld b, a             ; X
    jp tty_goto_xy

tty_putc:
    ; Check to see if there's a pending command.

    ld c, a
    ld a, (commandlen)
    or a
    jr nz, queue_command_byte

    ; Handle special characters.

    ld a, c
    cp 32
    jp c, controlcharacter

    ; This is a printable character, so print it.

    call tty_rawwrite

    ; Now we've drawn a character, advance the cursor.

	maybe_update_cursor
    ld hl, tty_cursorx
    ld a, (hl)
    inc a
    ld (hl), a
    cp SCREEN_WIDTH
    ret nz

    ; Reached the end of the line? Advance to the next one and go back to
    ; the margin.

    xor a
    ld (hl), a
    jp tty_cursor_down

; vim: sw=4 ts=4 expandtab ft=asm

